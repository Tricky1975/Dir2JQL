#include <SlyvArgParse.hpp>
#include <SlyvMKL.hpp>
#include <SlyvQuickHead.hpp>
#include <SlyvStream.hpp>
#include <SlyvVolumes.hpp>
#include <SlyvDirry.hpp>
#include <SlyvGINIE.hpp>
#include <SlyvAsk.hpp>
#include <SlyvTime.hpp>
#include <SlyvDir.hpp>

using namespace std;
using namespace Slyvina;
using namespace Units;

MKL_Init;

int errors{ 0 };
const char* PCFile{ "Dir2JQL.ini" };

void Error(std::string msg) {
	QCol->Red(TrSPrintF("Error #%03d: ", ++errors));
	QCol->Yellow(msg);
	cout << endl;
}

#define QER(msg) { Error(msg); return; }

void Act(ParsedArg& PA, std::string dir) {
	string output{ "JQL\n\n# Generated by Dir2JQL\n\n" };
	QCol->Doing("Analysing", dir);
	auto TD{ AVolPath(Dirry(dir)) };
	auto CFile{ TD + "/" + PCFile };
	GINIE CFG{ nullptr };
	if (!DirectoryExists(TD)) QER("Directory " + TD + " does not exist");
	if (!FileExists(CFile)) {
		GINIE Temp{ ParseGINIE("[nothing]\nnothing=nothing") };
		if (!Yes(Temp, "Just", "Ask", '"' + CFile + "\" does not yet exist! Create it")) QER("User denied permission to create required file");
		QCol->Doing("Creating", CFile);
		SaveString(CFile, "[creation]\nDate=" + CurrentDate() + "\nTime=" + CurrentTime() + "\nDir2JQLBuild="  __DATE__  "\n");
	}
	CFG = LoadGINIE(CFile,CFile,"JQL2Dir - Generated: "+CurrentDate());
	CFG->NewValue("base", "multi", boolstring(PA.bool_flags["m"]));
	CFG->NewValue("base", "FileByFile", boolstring(PA.bool_flags["fbf"]));
	bool multi{ CFG->BoolValue("base","multi") };
	bool FileByFile{ CFG->BoolValue("base","FileByFile")};
	VecString List{ nullptr };
	if (multi && FileByFile) QER("MultiDir and FileByFile not possible!");
	if (multi) {
		List = FileList(TD, DirWant::Directories);
		for (auto dir : *List) {
			string Tag{ "MULTIDIR::" + dir };
			if (Yes(CFG, Tag, "Include","Include dir '"+dir+"'")) {
				if (Yes(CFG, Tag, "Required", "Is '" + dir + "' a required directory")) output += "REQUIRED\n"; else output += "OPTIONAL\n";
				output += "AUTHOR:" + Ask(CFG,Tag,"Author", "Author of '" + dir + "': ", dir)+"\n";
				output += "NOTES:" + Ask(CFG, Tag, "Notes", "Notes for '" + dir + "': ")+"\n";
				output += "RAWDIR:" + TD + "/" + dir + "\n\n";
			}
		}
	} else {
		QER("Non-multi dir projects not yet supported. Please come back later");
	}
	auto savefile{ AVolPath(Dirry(Ask(CFG,"base", "output", "Where to store the output JQL? ", dir + ".jql"))) };
	QCol->Doing("Saving", savefile);
	SaveString(savefile, output);
}

int main(int c, char** a) {
	// Head
	MKL_VersionP(StripAll(a[0]), __DATE__);
	QuickHeader("Dir to JQL", 2023);

	// Parse arguments
	FlagConfig FC{};
	AddFlag_Bool(FC, "m", false); // multi-dir
	AddFlag_Bool(FC, "fbf", false); // File by file
	auto CLI{ ParseArg(c,a,FC) };

	// Sorry, no go!
	if (!CLI.arguments.size()) {
		QCol->LMagenta("Usage: ");
		QCol->Yellow(StripAll(CLI.myexe));
		QCol->Pink(" [switches] ");
		QCol->LCyan("<directories>");
		QCol->Reset();
		cout << endl << endl << endl;
		return 1;
	}
	for (auto d : CLI.arguments) Act(CLI, d);
	switch (errors) {
	case 0: QCol->Green("Everything handled succesfully"); break;
	case 1: QCol->Yellow("There was "); QCol->Red("1"); QCol->Yellow(" error"); break;
	default: QCol->Yellow("There were "); QCol->Red(to_string(errors)); QCol->Yellow(" errors"); break;
	}
	QCol->Reset(); cout << endl << endl;
	return errors;
}